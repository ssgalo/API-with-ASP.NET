Highlights of OOP:

Virtual: When you have a base class with a definition of a method, but in your derived classes that method will have a different implementation. 
It is necessary to use the reserved word "override" in the derived class to use that method.

If you don't want to define the method in the base class, you can use the concept: "Abstract class". It means, in that method you use the reserved word abstract...

Interface: It has only abstract members. When a derived class inherits from an interface, it must implement all the methods.

Namespaces declare a scope that contains a set of related objects. You can use a namespace to organize code elements. You can define your own namespaces and use them in your program.
The using keyword states that the program is using a given namespace.
For example, we are using the System namespace in our programs, which is where the class Console is defined:
-----------------------------------------
DON'T FORGET ABOUT GENERIC TYPES. (<T>)
-----------------------------------------
Inyección de dependencias:
Conviene siempre que una clase no instancie objetos dentro de la misma. Eso lo hará sumamente dependiente de ese tipo de objeto. Si el constructor de ese objeto cambia, tendremos que cambiar toda la clase.
Para ello, es correcto usar este patrón de diseño de inyección de dependencias. 
Se puede aplicar, por ejemplo, utilizando interfaces abstractas para justamente abtstraer esos objetos y pasarle el objeto ya instanciado como parametro, en vez de instanciarlo en el constructor de la misma clase.
